# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""attachment"""
type Attachment {
  createdAt: DateTime!
  id: ID!
  s3Key: String!
}

input AttachmentListRelationFilter {
  every: AttachmentWhereInput
  none: AttachmentWhereInput
  some: AttachmentWhereInput
}

input AttachmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  NOT: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  s3Key: StringFilter
  task: TaskRelationFilter
  taskId: IntFilter
}

input CreateAttachmentInput {
  s3Key: String!
}

input CreateSubtaskInput {
  description: String
  dueDate: DateTime
  priority: String = "P4"
  title: String!
}

input CreateTaskInput {
  description: String
  dueDate: DateTime
  priority: String = "P4"
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  roles: [Role!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  addAttachment(data: CreateAttachmentInput!, taskId: Int!): Attachment!
  addSubtask(data: CreateSubtaskInput!, taskId: Int!): Subtask!
  addTask(data: CreateTaskInput!, userId: Int!): Task!
  createUser(payload: CreateUserInput!): User!
  deleteAttachment(id: Int!): Boolean!
  deleteSubtask(id: Int!): Boolean!
  deleteTask(id: Int!): Boolean!

  """Generate signed URL for obtaining attachment from S3 bucket"""
  getTaskAttachmentUrls(taskId: Int!): [String!]!

  """Generate signed URL for uploading to S3 bucket"""
  getUrlForTaskAttachmentUpload(fileName: String!, taskId: Int!): String!
  login(email: String!, password: String!): User!
  logout: Boolean!
  refreshToken: Boolean!
  removeUser(id: Int!): User!
  updateSubtask(data: UpdateSubaskInput!, id: Int!): Subtask!
  updateTask(data: UpdateTaskInput!, id: Int!): Task!
  updateUser(data: UpdateUserInput!, id: Int!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""Task priority levels."""
enum Priority {
  P1
  P2
  P3

  """Default priority level."""
  P4
}

type Query {
  task(id: Int!): Task!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(id: Int!): User!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  whoAmI: User!
}

enum QueryMode {
  default
  insensitive
}

"""User access roles."""
enum Role {
  ADMIN

  """Default role."""
  USER
}

input RoleListRelationFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  User: UserListRelationFilter
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  taskAdded: Task!
}

"""subtask"""
type Subtask {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: ID!
  priority: Priority
  title: String!
}

input SubtaskListRelationFilter {
  every: SubtaskWhereInput
  none: SubtaskWhereInput
  some: SubtaskWhereInput
}

input SubtaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubtaskWhereInput {
  AND: [SubtaskWhereInput!]
  NOT: [SubtaskWhereInput!]
  OR: [SubtaskWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  id: IntFilter
  priority: StringFilter
  task: TaskRelationFilter
  taskId: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

"""task"""
type Task {
  attachments: [Attachment!]!
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: ID!
  priority: Priority
  subtasks: [Subtask!]!
  title: String!
  user: User!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithRelationInput {
  attachments: AttachmentOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  id: SortOrder
  priority: SortOrder
  subtasks: SubtaskOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  createdAt
  description
  dueDate
  id
  priority
  title
  updatedAt
  userId
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  attachments: AttachmentListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  id: IntFilter
  priority: StringFilter
  subtasks: SubtaskListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input TaskWhereUniqueInput {
  id: Int
}

input UpdateSubaskInput {
  description: String
  dueDate: DateTime
  priority: String = "P4"
  title: String
}

input UpdateTaskInput {
  description: String
  dueDate: DateTime
  priority: String = "P4"
  title: String
}

input UpdateUserInput {
  email: String
  name: String
  roles: [Role!]
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  roles: [Role!]!
  tasks: [Task!]!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  roles: RoleOrderByRelationAggregateInput
  tasks: TaskOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  refreshToken
  updatedAt
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  roles: RoleListRelationFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}